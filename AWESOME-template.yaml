AWSTemplateFormatVersion: '2010-09-09'
Description: |
  AwesomeEnvironment: A fundamental AWS architecture with VPC, subnets, NAT, EC2 + ASG + ELB, S3, RDS, WAF, NACLs, Route53, CloudFront, DynamoDB, cross-region VPC peering, and AWS Backup integration.

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR block for the VPC.
  DRRegion:
    Type: String
    Default: us-west-2
    Description: The region to copy backups for DR.

  # Add the new parameters here
  EnableCrossRegionBackup:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Enable cross-region backup copying

  BackupRetentionDays:
    Type: Number
    Default: '30'
    Description: Number of days to retain backups in primary region

  DRBackupRetentionDays:
    Type: Number
    Default: '60'
    Description: Number of days to retain backups in DR region

  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.101.0/24

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.102.0/24

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access.

  DBUser:
    Type: String
    Default: admin

  DBPassword:
    Type: String
    NoEcho: true
    Default: password_is_awesome

  PeerVpcId:
    Type: String
    Description: The VPC ID of the peer VPC in the other region.

  PeerRegion:
    Type: String
    Default: us-west-2

  DomainName:
    Type: String
    Default: awesome.com

Condition:
  EnableCrossRegionBackup: !Equals
    - !Ref EnableCrossRegionBackup
    - true

Resources:
  # ------------------
  # 1) Networking
  # ------------------
  AwesomeEnvironmentVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: AwesomeEnvironment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AwesomeEnvironmentIGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AwesomeEnvironmentVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AwesomeEnvironmentVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AwesomeEnvironmentVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AwesomeEnvironmentVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AwesomeEnvironmentVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  NatEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: AwesomeEnvironmentNAT

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AwesomeEnvironmentVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AwesomeEnvironmentVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # ------------------
  # 2) EC2 + AutoScaling + ELB
  # ------------------
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/SSH
      VpcId: !Ref AwesomeEnvironmentVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-1234567890abcdef # PLACEHOLDER: Replace with valid AMI
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref AppSecurityGroup

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref MyLaunchConfig
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: AwesomeEnvASG
          PropagateAtLaunch: true

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: AwesomeEnvELB

  # ------------------
  # 3) S3, DynamoDB, RDS, WAF, NACL
  # ------------------
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: awesome-env-bucket-PLACEHOLDER # Must be globally unique

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AwesomeEnvTable
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL from VPC
      VpcId: !Ref AwesomeEnvironmentVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: awesomeenvdb
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: mysql
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBName: awesomeenvdatabase
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 7

  MyWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: AwesomeEnvWebACL
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: AwesomeEnvWebACL
      Rules: []

  MyNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref AwesomeEnvironmentVPC
      Tags:
        - Key: Name
          Value: AwesomeEnvNetworkACL

  MyNetworkAclIngressRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  MyNetworkAclEgressRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # ------------------
  # 4) Route53 + CloudFront
  # ------------------
  MyHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName

  MyDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref MyHostedZone
      Name: !Sub www.${DomainName}.
      Type: A
      TTL: '300'
      ResourceRecords:
        - 1.2.3.4 # PLACEHOLDER: Replace with ELB DNS name

  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt MyS3Bucket.DomainName
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
          DefaultTTL: 86400 # This is the correct way to set TTL (in seconds, 86400 = 24 hours)
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http1.1
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        Aliases:
          - !Ref DomainName
          - !Sub www.${DomainName}

  # ------------------
  # 5) VPC Peering
  # ------------------
  MyVPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref AwesomeEnvironmentVPC
      PeerVpcId: !Ref PeerVpcId
      PeerRegion: !Ref PeerRegion
      Tags:
        - Key: Name
          Value: AwesomeEnvPeering

  # ------------------
  # 6) Backup & DR
  # ------------------
  PrimaryBackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: AwesomeEnvPrimaryVault
      EncryptionKeyArn: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/PLACEHOLDER-KMS-KEY-ID # Optional

  BackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: AwesomeEnvBackupPlan
        Rules:
          - RuleName: DailyRDSBackup
            TargetBackupVault: !Ref PrimaryBackupVault
            ScheduleExpression: cron(0 3 * * ? *)
            StartWindowMinutes: 60
            CompletionWindowMinutes: 180
            Lifecycle:
              DeleteAfterDays: !Ref BackupRetentionDays
            CopyActions: !If
              - IsCrossRegionBackupEnabled
              - - DestinationBackupVaultArn: !Sub arn:aws:backup:${DRRegion}:${AWS::AccountId}:backup-vault/AwesomeEnvDRVault
                  Lifecycle:
                    DeleteAfterDays: !Ref DRBackupRetentionDays
              - !Ref AWS::NoValue

  BackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        SelectionName: AwesomeEnvResourceSelection
        IamRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/AWSBackupDefaultServiceRole
        Resources:
          - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${MyDBInstance}

  # ------------------
  # 7) SNS Alerts
  # ------------------
  BackupAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AwesomeEnvBackupAlerts

  BackupAlertsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref BackupAlertsTopic
      Protocol: email
      Endpoint: awesome@example.com #This is a PLACEHOLDER here obviously: Replace with your email

Outputs:
  VPCId:
    Description: The ID of the AwesomeEnvironment VPC
    Value: !Ref AwesomeEnvironmentVPC

  PublicSubnet1Id:
    Description: ID of Public Subnet 1
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: ID of Public Subnet 2
    Value: !Ref PublicSubnet2

  PrivateSubnet1Id:
    Description: ID of Private Subnet 1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: ID of Private Subnet 2
    Value: !Ref PrivateSubnet2

  LoadBalancerDNS:
    Description: DNS name of the ELB
    Value: !GetAtt MyLoadBalancer.DNSName

  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref MyS3Bucket

  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref DynamoDBTable

  DBInstanceEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Address

  BackupVaultName:
    Description: Name of the Backup Vault
    Value: !Ref PrimaryBackupVault